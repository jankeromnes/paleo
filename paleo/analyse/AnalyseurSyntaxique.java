/*
 * PALEO: Petite Application Logicielle d'Etude Objet
 *
 * <p>PALEO est un pseudo-compilateur generant des schemas memoires en fonction d'instructions Java.</p>
 * 
 * Projet de Synthese (LCIN4U51)
 * Licence Informatique Semestre 4
 * Universite Henri Poincare (UHP Nancy)
 * 
 * @author: Jan KEROMNES
 * @version: 1.0
 * 
 */
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 19 09:45:49 CEST 2010
//----------------------------------------------------

package paleo.analyse;

import paleo.arbre.Arbre;
import paleo.arbre.DeclarationObjet;
import paleo.arbre.DeclarationPrimitive;
import paleo.arbre.VariableNulle;
import paleo.arbre.VariableObjet;
import paleo.arbre.VariablePrimitive;

// TODO: Auto-generated Javadoc
/**
 * L'Analyseur Syntaxique.
 */
public class AnalyseurSyntaxique extends java_cup.runtime.lr_parser {

	/** The Constant _production_table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\017\000\002\002\004\000\002\002\003\000\002\003"
			+ "\004\000\002\003\003\000\002\004\004\000\002\004\004"
			+ "\000\002\004\004\000\002\004\006\000\002\007\004\000"
			+ "\002\007\004\000\002\006\006\000\002\006\006\000\002"
			+ "\006\006\000\002\005\005\000\002\005\005" });

	/** The Constant _action_table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\034\000\010\010\007\011\004\013\013\001\002\000"
			+ "\006\005\032\007\031\001\002\000\004\002\030\001\002"
			+ "\000\012\002\ufffe\010\ufffe\011\ufffe\013\ufffe\001\002\000"
			+ "\004\011\025\001\002\000\004\004\024\001\002\000\004"
			+ "\004\023\001\002\000\012\002\000\010\007\011\004\013"
			+ "\013\001\002\000\004\011\016\001\002\000\004\004\015"
			+ "\001\002\000\012\002\ufffc\010\ufffc\011\ufffc\013\ufffc\001"
			+ "\002\000\006\004\ufff8\005\017\001\002\000\006\006\021"
			+ "\012\020\001\002\000\004\004\ufff6\001\002\000\004\004"
			+ "\ufff5\001\002\000\012\002\uffff\010\uffff\011\uffff\013\uffff"
			+ "\001\002\000\012\002\ufffb\010\ufffb\011\ufffb\013\ufffb\001"
			+ "\002\000\012\002\ufffd\010\ufffd\011\ufffd\013\ufffd\001\002"
			+ "\000\006\004\ufff9\005\026\001\002\000\004\012\027\001"
			+ "\002\000\004\004\ufff7\001\002\000\004\002\001\001\002"
			+ "\000\004\012\035\001\002\000\006\006\034\012\033\001"
			+ "\002\000\004\004\ufff4\001\002\000\004\004\ufff3\001\002"
			+ "\000\004\004\036\001\002\000\012\002\ufffa\010\ufffa\011"
			+ "\ufffa\013\ufffa\001\002" });

	/** The Constant _reduce_table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\034\000\016\002\004\003\011\004\005\005\010\006"
			+ "\013\007\007\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\012\004\021\005\010\006\013\007\007"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001" });

	/** The action_obj. */
	protected CUP$AnalyseurSyntaxique$actions action_obj;

	/**
	 * Instantiates a new analyseur syntaxique.
	 */
	public AnalyseurSyntaxique() {
		super();
	}

	/**
	 * Instantiates a new analyseur syntaxique.
	 * 
	 * @param s
	 *            the s
	 */
	public AnalyseurSyntaxique(java_cup.runtime.Scanner s) {
		super(s);
	}

	/**
	 * Instantiates a new analyseur syntaxique.
	 * 
	 * @param s
	 *            the s
	 * @param sf
	 *            the sf
	 */
	public AnalyseurSyntaxique(java_cup.runtime.Scanner s,
			java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#action_table()
	 */
	@Override
	public short[][] action_table() {
		return _action_table;
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#do_action(int, java_cup.runtime.lr_parser, java.util.Stack, int)
	 */
	@Override
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$AnalyseurSyntaxique$do_action(act_num, parser,
				stack, top);
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#EOF_sym()
	 */
	@Override
	public int EOF_sym() {
		return 0;
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#error_sym()
	 */
	@Override
	public int error_sym() {
		return 1;
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#init_actions()
	 */
	@Override
	protected void init_actions() {
		action_obj = new CUP$AnalyseurSyntaxique$actions(this);
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#production_table()
	 */
	@Override
	public short[][] production_table() {
		return _production_table;
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#reduce_table()
	 */
	@Override
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/*
	 * Change the method report_error so it will display the line and column of
	 * where the error occurred in the input as well as the reason for the error
	 * which is passed into the method in the String 'message'.
	 */
	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#report_error(java.lang.String, java.lang.Object)
	 */
	@Override
	public void report_error(String message, Object info) {

		/* Create a StringBuffer called 'm' with the string 'Error' in it. */
		StringBuffer m = new StringBuffer("Error");

		/*
		 * Check if the information passed to the method is the same type as the
		 * type java_cup.runtime.Symbol.
		 */
		if (info instanceof java_cup.runtime.Symbol) {
			/*
			 * Declare a java_cup.runtime.Symbol object 's' with the information
			 * in the object info that is being typecasted as a
			 * java_cup.runtime.Symbol object.
			 */
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

			/*
			 * Check if the line number in the input is greater or equal to
			 * zero.
			 */
			if (s.left >= 0) {
				/*
				 * Add to the end of the StringBuffer error message the line
				 * number of the error in the input.
				 */
				m.append(" in line " + (s.left + 1));
				/*
				 * Check if the column number in the input is greater or equal
				 * to zero.
				 */
				if (s.right >= 0) {
					/*
					 * Add to the end of the StringBuffer error message the
					 * column number of the error in the input.
					 */
					m.append(", column " + (s.right + 1));
				}
			}
		}

		/*
		 * Add to the end of the StringBuffer error message created in this
		 * method the message that was passed into this method.
		 */
		m.append(" : " + message);

		/*
		 * Print the contents of the StringBuffer 'm', which contains an error
		 * message, out on a line.
		 */
		System.err.println(m);
	}

	/*
	 * Change the method report_fatal_error so when it reports a fatal error it
	 * will display the line and column number of where the fatal error occurred
	 * in the input as well as the reason for the fatal error which is passed
	 * into the method in the object 'message' and then exit.
	 */
	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#report_fatal_error(java.lang.String, java.lang.Object)
	 */
	@Override
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#start_production()
	 */
	@Override
	public int start_production() {
		return 0;
	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#start_state()
	 */
	@Override
	public int start_state() {
		return 0;
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$AnalyseurSyntaxique$actions {

	Arbre arbrePaleo = new Arbre();
	private final AnalyseurSyntaxique parser;

	/** Constructor */
	CUP$AnalyseurSyntaxique$actions(AnalyseurSyntaxique parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$do_action(
			int CUP$AnalyseurSyntaxique$act_num,
			java_cup.runtime.lr_parser CUP$AnalyseurSyntaxique$parser,
			java.util.Stack CUP$AnalyseurSyntaxique$stack,
			int CUP$AnalyseurSyntaxique$top) throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$result;

		/* select the action based on the action number */
		switch (CUP$AnalyseurSyntaxique$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // AFF ::= IDF EGAL NULL
		{
			String RESULT = null;
			String i = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 2)).value;
			arbrePaleo.annuler(i);
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"AFF",
							3,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 2)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // AFF ::= IDF EGAL EXPR
		{
			String RESULT = null;
			String i = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 2)).value;
			arbrePaleo.affecter(i);
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"AFF",
							3,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 2)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // DAFF ::= CLASSE IDF EGAL NULL
		{
			String RESULT = null;
			String i = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 2)).value;
			arbrePaleo.add(new VariableNulle(i));
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"DAFF",
							4,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 3)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // DAFF ::= CLASSE IDF EGAL EXPR
		{
			String RESULT = null;
			String i = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 2)).value;
			arbrePaleo.add(new VariableObjet(i));
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"DAFF",
							4,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 3)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // DAFF ::= TYPEPRIMITIF IDF EGAL EXPR
		{
			String RESULT = null;
			String i = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 2)).value;
			arbrePaleo.add(new VariablePrimitive(i));
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"DAFF",
							4,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 3)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // DECL ::= CLASSE IDF
		{
			String RESULT = null;
			String i = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.peek()).value;
			arbrePaleo.add(new DeclarationObjet(i));
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"DECL",
							5,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 1)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // DECL ::= TYPEPRIMITIF IDF
		{
			String RESULT = null;
			String t = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).value;
			int ileft = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.peek()).left;
			int iright = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.peek()).right;
			String i = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.peek()).value;
			arbrePaleo.add(new DeclarationPrimitive(i));
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"DECL",
							5,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 1)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // INST ::= IDF POINT EXPR POINTVIRGULE
		{
			String RESULT = null;

			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"INST",
							2,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 3)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // INST ::= AFF POINTVIRGULE
		{
			String RESULT = null;
			int arbrePaleoleft = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).left;
			int arbrePaleoright = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).right;
			String arbrePaleo = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).value;

			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"INST",
							2,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 1)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // INST ::= DAFF POINTVIRGULE
		{
			String RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).right;
			String d = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).value;

			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"INST",
							2,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 1)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // INST ::= DECL POINTVIRGULE
		{
			String RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).right;
			String d = (String) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).value;

			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"INST",
							2,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 1)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // LINST ::= INST
		{
			String RESULT = null;

			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"LINST",
							1,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // LINST ::= LINST INST
		{
			String RESULT = null;

			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"LINST",
							1,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 1)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // PROG ::= LINST
		{
			Arbre RESULT = null;
			RESULT = arbrePaleo;
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"PROG",
							0,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= PROG EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).right;
			Arbre start_val = (Arbre) ((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
					.elementAt(CUP$AnalyseurSyntaxique$top - 1)).value;
			RESULT = start_val;
			CUP$AnalyseurSyntaxique$result = parser
					.getSymbolFactory()
					.newSymbol(
							"$START",
							0,
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.elementAt(CUP$AnalyseurSyntaxique$top - 1)),
							((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack
									.peek()), RESULT);
		}
			/* ACCEPT */
			CUP$AnalyseurSyntaxique$parser.done_parsing();
			return CUP$AnalyseurSyntaxique$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
